import { defineStore } from 'pinia'
import axios from 'axios'
import { useCartStore } from './baskets'
import { useFavoritesStore } from './favorites'

export const useAuthStore = defineStore('auth', {
  state: () => ({
    cus_id: null,
    user: null
  }),

  getters: {
    isAuthenticated: (state) => !!state.cus_id
  },

  actions: {
    sanitizeUserData(userData) {
      if (!userData || userData.cus_id === undefined) {
        // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –∏–ª–∏ –æ–Ω–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã, –æ—á–∏—â–∞–µ–º –∏—Ö –∏–∑ localStorage
        console.warn('‚ùå userData –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç cus_id. –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö.')
        localStorage.removeItem('user')
        localStorage.removeItem('customersId')
        throw new Error('‚ùå userData –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç cus_id')
      }

      const parsedId = Number(userData.cus_id)
      if (!Number.isInteger(parsedId)) {
        // –ï—Å–ª–∏ cus_id –Ω–µ –≤–∞–ª–∏–¥–Ω—ã–π, —É–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        console.warn('‚ùå userData.cus_id –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º —á–∏—Å–ª–æ–º. –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö.')
        localStorage.removeItem('user')
        localStorage.removeItem('customersId')
        throw new Error('‚ùå userData.cus_id –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º —á–∏—Å–ª–æ–º')
      }

      return {
        ...userData,
        cus_id: parsedId // –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —á–∏—Å–ª–æ–º
      }
    },

    async setUser(userData) {
      console.log('üì• –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userData)

      const cleanData = this.sanitizeUserData(userData)
      this.cus_id = cleanData.cus_id
      this.user = cleanData

      localStorage.setItem('customersId', cleanData.cus_id)
      localStorage.setItem('user', JSON.stringify(cleanData))

      // ‚¨áÔ∏è –û—á–∏—â–∞–µ–º –≥–æ—Å—Ç–µ–≤—É—é –∫–æ—Ä–∑–∏–Ω—É
      localStorage.removeItem('baskets')
      localStorage.removeItem('favorites')

      await this.mergeGuestFavorites()
    },

    logout() {
      this.cus_id = null
      this.user = null
      localStorage.removeItem('customersId')
      localStorage.removeItem('user')
      useCartStore().clearCart()
      useFavoritesStore().clearFavorites()
    },

    async loadUserFromLocalStorage() {
      const storedUser = localStorage.getItem('user')

      if (storedUser) {
        try {
          const parsed = JSON.parse(storedUser)
          const sanitized = this.sanitizeUserData(parsed)
          await this.setUser(sanitized)
        } catch (e) {
          console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ user –∏–∑ localStorage:', e)
        }
      } else {
        const customersId = localStorage.getItem('customersId')
        if (!customersId) {
          console.warn('üì≠ customersId –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ localStorage')
        } else if (/^\d+$/.test(customersId) && Number(customersId) <= 2147483647) {
          console.log(`üì° –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID: ${customersId}`)
          try {
            const { data } = await axios.get(`http://localhost:8080/apis/customer/${customersId}`)
            const sanitized = this.sanitizeUserData(data)
            await this.setUser(sanitized)
          } catch (error) {
            console.error(
              '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:',
              error.response?.data || error.message
            )
          }
        } else {
          console.warn('‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π customersId:', customersId)
          localStorage.removeItem('customersId')
        }
      }
    },

    async mergeGuestFavorites() {
      const guestFavorites = JSON.parse(localStorage.getItem('favorites') || '[]')
      if (guestFavorites.length === 0) return

      const customersId = this.cus_id
      if (!customersId) {
        console.warn('‚ö†Ô∏è mergeGuestFavorites –≤—ã–∑–≤–∞–Ω –±–µ–∑ customersId')
        return
      }

      try {
        const { data: serverFavorites } = await axios.get(
          `http://localhost:8080/apis/favourites?customersId=${customersId}`
        )

        const serverIds = serverFavorites.map((f) => f.des_id)
        const toAdd = guestFavorites.filter((id) => !serverIds.includes(id))

        await Promise.all(
          toAdd.map((desertId) =>
            axios.post('http://localhost:8080/apis/favourite', {
              desertId,
              customersId
            })
          )
        )

        localStorage.removeItem('favorites')
      } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ:', err)
      }
    }
  }
})
